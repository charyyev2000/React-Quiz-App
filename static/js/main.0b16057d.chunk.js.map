{"version":3,"sources":["components/API.tsx","components/Utils.tsx","components/QuestionCard.style.ts","components/QuestionCard.tsx","images/bgImage.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","bgImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gamevOer","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDom","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b16057d.chunk.js","sourcesContent":["import { shuffleArray } from \"./Utils\";\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\"\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport const fetchQuizQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer\r\n    ])\r\n  }));\r\n};\r\n","export const shuffleArray = (array: any[]) =>\r\n  [...array].sort(() => Math.random() - 0.5);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? \"linear-gradient(90deg, #56ffa4, #59bc86)\"\r\n        : !correct && userClicked\r\n        ? \"linear-gradient(90deg, #ff5656, #c16868)\"\r\n        : \"linear-gradient(90deg, #56ccff, #6eafb4)\"};\r\n    border: 3px solid #fff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { Wrapper, ButtonWrapper } from \"./QuestionCard.style\";\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: any;\r\n  questionNr: number;\r\n  totalQuestions: number;\r\n};\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n  question,\r\n  callback,\r\n  answers,\r\n  userAnswer,\r\n  questionNr,\r\n  totalQuestions\r\n}) => (\r\n  <Wrapper>\r\n    <p className=\"number\">\r\n      Question: {questionNr} / {totalQuestions}{\" \"}\r\n    </p>\r\n\r\n    <p dangerouslySetInnerHTML={{ __html: question }} />\r\n\r\n    <div>\r\n      {answers.map((answer) => (\r\n        <ButtonWrapper\r\n          key={answer}\r\n          correct={userAnswer?.correctAnswer === answer}\r\n          userClicked={userAnswer?.answer === answer}\r\n        >\r\n          <button disabled={!!userAnswer} value={answer} onClick={callback}>\r\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n          </button>\r\n        </ButtonWrapper>\r\n      ))}\r\n    </div>\r\n  </Wrapper>\r\n);\r\n\r\nexport default QuestionCard;\r\n","export default __webpack_public_path__ + \"static/media/bgImage.83ee8ba1.jpg\";","import styled, { createGlobalStyle } from \"styled-components\";\r\n// @ts-ignore\r\nimport bgImage from \"./images/bgImage.jpg\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    font-family: 'Catamaran', sans-serif;\r\n}\r\nhtml{\r\n    height: 100%;\r\n}\r\nbody {\r\n    background-image: url(${bgImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding:0 20px;\r\n    display: flex;\r\n    justify-content: center\r\n}\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  > p {\r\n    color: white;\r\n  }\r\n\r\n  .score {\r\n    color: white;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n\r\n  h1 {\r\n    font-family: Fascinate Inline, Haetenschweiler;\r\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 70px;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n\r\n  .start,\r\n  .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #fff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\n// types\r\nimport {\r\n  QuestionState,\r\n  Difficulty,\r\n  fetchQuizQuestions\r\n} from \"./components/API\";\r\n// components\r\nimport QuestionCard from \"./components/QuestionCard\";\r\n// styles\r\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\r\n\r\nexport type AnswerObject = {\r\n  question: string;\r\n  answer: string;\r\n  correct: boolean;\r\n  correctAnswer: string;\r\n};\r\n\r\nconst TOTAL_QUESTIONS = 10;\r\n\r\nconst App = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\r\n  const [number, setNumber] = useState(0);\r\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\r\n  const [score, setScore] = useState(0);\r\n  const [gamevOer, setGameOver] = useState(true);\r\n\r\n  //   console.log(fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY));\r\n  //   console.log(questions);\r\n\r\n  const startTrivia = async () => {\r\n    setLoading(true);\r\n    setGameOver(false);\r\n\r\n    const newQuestions = await fetchQuizQuestions(\r\n      TOTAL_QUESTIONS,\r\n      Difficulty.EASY\r\n    );\r\n\r\n    setQuestions(newQuestions);\r\n    setScore(0);\r\n    setUserAnswers([]);\r\n    setNumber(0);\r\n    setLoading(false);\r\n  };\r\n\r\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    if (!gamevOer) {\r\n      //   users answer\r\n      const answer = e.currentTarget.value;\r\n\r\n      //   check answer agains correct answer\r\n      const correct = questions[number].correct_answer === answer;\r\n\r\n      // add score if answer is correct\r\n      if (correct) setScore((prev) => prev + 1);\r\n\r\n      //   save answer in the array for user answers\r\n      const answerObject = {\r\n        question: questions[number].question,\r\n        answer,\r\n        correct,\r\n        correctAnswer: questions[number].correct_answer\r\n      };\r\n      setUserAnswers((prev) => [...prev, answerObject]);\r\n    }\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    //   move on the the next question if not the last question\r\n    const nextQuestion = number + 1;\r\n\r\n    if (nextQuestion === TOTAL_QUESTIONS) {\r\n      setGameOver(true);\r\n    } else {\r\n      setNumber(nextQuestion);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Wrapper>\r\n        <h1>React Quiz App</h1>\r\n        {gamevOer || userAnswers.length === TOTAL_QUESTIONS ? (\r\n          <button className=\"start\" onClick={startTrivia}>\r\n            Start\r\n          </button>\r\n        ) : null}\r\n        {!gamevOer ? <p className=\"score\">Score: {score}</p> : null}\r\n        {loading && <p>Loading Questions...</p>}\r\n        {!loading && !gamevOer && (\r\n          <QuestionCard\r\n            questionNr={number + 1}\r\n            totalQuestions={TOTAL_QUESTIONS}\r\n            question={questions[number].question}\r\n            answers={questions[number].answers}\r\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\r\n            callback={checkAnswer}\r\n          />\r\n        )}\r\n\r\n        {!gamevOer &&\r\n        !loading &&\r\n        userAnswers.length === number + 1 &&\r\n        number !== TOTAL_QUESTIONS - 1 ? (\r\n          <button className=\"next\" onClick={nextQuestion}>\r\n            Next Question\r\n          </button>\r\n        ) : null}\r\n      </Wrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDom.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}